@use '@styles/colors';
@use '@styles/grid';
@use '@components/Listen/Listen.use.scss' as Listen;

$episode-text-size--max: 1.25rem;
$episode-text-size--min: 1rem;

$episode-thumbnail-size: 120px;
$episode-thumbnail-size--mobile: 50vw;

$episode-divider-color: var(--listen-divider-color, colors.$white-a-60);
$episode-divider-size: 2px;

$episode-header-text-color: colors.$white;
$episode-header-text-size--max: 1.25rem;
$episode-header-text-size--min: 1rem;

$episode-breakpoint--full: 120ch;

:export {
  --episode-text-size--max: #{$episode-text-size--max};
  --episode-text-size--min: #{$episode-text-size--min};

  --episode-thumbnail-size: #{$episode-thumbnail-size};
  --episode-thumbnail-size--mobile: #{$episode-thumbnail-size--mobile};

  --episode-divider-color: #{$episode-divider-color};
  --episode-divider-size: #{$episode-divider-size};

  --episode-header-text-color: #{$episode-header-text-color};
  --episode-header-text-size--max: #{$episode-header-text-size--max};
  --episode-header-text-size--min: #{$episode-header-text-size--min};
}

.root {
  container-type: inline-size;
  container-name: episode-root;
  display: grid;
  grid-template-rows: min-content 1fr;
  gap: 0;
  height: 100%;
  overflow: hidden;
}

.nav {
  --iconButton--size: 100%;

  display: grid;
  grid-template-columns: 2em 1fr;
  gap: 0.5rem;
  align-items: center;

  padding-inline-start: 0.5rem;
  padding-block: 0.5rem;

  border-top-style: solid;
  border-top-width: var(--episode-divider-size);
  border-top-color: var(--episode-divider-color);

  border-bottom-style: solid;
  border-bottom-width: var(--episode-divider-size);
  border-bottom-color: var(--episode-divider-color);

  font-size: clamp(
    var(--episode-header-text-size--min),
    5vw,
    var(--episode-header-text-size--max)
  );

  line-height: 1;

  &.isExplicit {
    grid-template-columns: 2em min-content 1fr;
  }
}

.explicit {
  fill: currentColor;
  width: 1.5em;
  line-height: 0;
}

.title {
  overflow: hidden;

  margin: 0;

  padding-inline-end: 0.5rem;

  font-size: inherit;
}

.main {
  --gap: 1rem;

  display: grid;
  grid-template-rows: [thumbnail-start] var(--episode-thumbnail-size--mobile) [thumbnail-end] [header-start] min-content [header-end] [main-start] auto [main-end];
  grid-template-columns: none;
  align-content: start;
  gap: var(--gap);
  overflow: hidden;
  overflow-y: auto;

  outline: solid 1px white;

  padding-inline: 0;

  & > * {
    grid-column: 1;
  }

  @media (min-width: Listen.$breakpoint-full) {
    grid-template-columns: var(--episode-thumbnail-size) 1fr;
    grid-template-rows: min-content 1fr;
    row-gap: 0;
    overflow-y: hidden;
    height: 100%;

    padding-inline: 0;
  }
}

.header {
  --spacing: 0.25rem;

  position: sticky;
  top: 0;
  display: grid;
  z-index: 9;
  isolation: isolate;
  grid-template-columns: auto min-content;
  grid-auto-rows: min-content;
  justify-content: space-between;
  align-items: center;
  gap: var(--gap);

  border-bottom: var(--episode-divider-size) solid var(--episode-divider-color);

  padding: var(--gap);

  color: var(--episodeCard-footer-text-color);
  font-size: clamp(
    var(--episodeCard-footer-text-size--min),
    5vw,
    var(--episodeCard-footer-text-size--max)
  );
  font-weight: 300;

  &::before {
    content: '';
    position: absolute;
    inset: 0;
    z-index: -1;

    background-color: colors.$black-a-70;
    backdrop-filter: blur(30px);
  }

  @media (min-width: Listen.$breakpoint-full) {
    grid-row: 1;
    grid-column: 2;
    grid-template-rows: none;
    justify-content: space-between;
    align-self: center;

    border-bottom: none;

    &::before {
      content: none;
    }
  }
}

.thumbnail {
  justify-self: center;

  position: relative;
  width: var(--episode-thumbnail-size--mobile);
  aspect-ratio: 1;

  border: 1px solid var(--listen-divider-color);

  margin-block-start: var(--gap);

  @media (min-width: Listen.$breakpoint-full) {
    grid-row: 1;
    grid-column: 1;
    transform: translateZ(0);
    position: relative;
    // right: calc(100% + var(--gap));
    width: var(--episode-thumbnail-size);

    margin-block-end: var(--gap);
  }
}

.headerMain {
  display: flex;
  align-items: center;
  column-gap: var(--spacing);
}

.controls {
  --iconButton--size: 60px;
  --iconButton--padding: 0;
}

.info {
  overflow: hidden;
}

.infoWrapper {
  position: relative;
  inset-inline-start: calc(var(--spacing) * -1);
  display: flex;
  flex-wrap: wrap;
  column-gap: var(--spacing);

  & > * {
    white-space: nowrap;

    &::before {
      content: '\2022';
      margin-inline-end: var(--spacing);
    }
  }
}

.menu {
  justify-self: end;
}

.viewNav {
  display: flex;
  gap: 1rem;
}

.viewNavButton {
  font-weight: 500;
  text-transform: capitalize;
  opacity: 0.7;

  &:where(:focus) {
    outline: none;
  }

  &:where(:hover, :focus-visible) {
    opacity: 1;
  }
}

.content {
  position: relative;
  padding-block-end: calc(
    var(--gutter-size-block-end, var(--gutter-size-block)) + var(--gap)
  );

  & > * {
    scroll-snap-type: y proximity;
    scroll-snap-align: start;
    // TODO: Figure out how to not magic number this offset.
    scroll-margin-top: calc(132px + var(--gap) - var(--episode-divider-size));
  }

  @media (min-width: Listen.$breakpoint-full) {
    grid-row: 2;
    grid-column: 1 / -1;
    overflow: hidden;
    overflow-y: auto;

    padding-block-end: calc(
      var(--gutter-size-block-end, var(--gutter-size-block)) + var(--gap) * 2
    );

    border-top: var(--episode-divider-size) solid var(--episode-divider-color);

    & > * {
      scroll-margin-top: 0;
    }
  }
}

.heading {
  padding-inline: var(--gap);
  padding-block: 2rem;
  margin-block-start: 3rem;
  border-block-start: 3px solid var(--episode-divider-color);
  border-block-end: 1px solid var(--episode-divider-color);
}

.description {
  padding: var(--gap);

  font-size: clamp(
    var(--episode-text-size--min),
    1.5vw,
    var(--episode-text-size--max)
  );

  & > * {
    max-width: 80ch;
    margin-inline-end: auto;
  }

  & > :where(p) {
    margin-block: 0;
  }

  & > * + :where(p) {
    margin-block-start: 0.5rem;
  }

  a {
    color: var(--accent-color, colors.$primary-500);

    &:where(:focus-visible) {
      outline-width: 1px;
      outline-style: dotted;
      outline-offset: 3px;
      outline-color: var(--accent-color-2, currentColor);
      box-shadow: none;
    }

    &:where(:hover) {
      text-decoration: underline;
      text-decoration-color: var(--accent-color-2, currentColor);
      text-underline-offset: 0.2em;
    }
  }
}

@container episode-root (width > #{Listen.$breakpoint-full}) {
  .thumbnail {
    grid-row: 1 / -1;
  }

  .content {
    grid-column: 2;
  }
}

@keyframes episode-view-show {
  from {
    transform: translateX(100px);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes episode-view-hide {
  to {
    transform: scale(0.9);
    opacity: 0;
    filter: blur(20px);
  }
}
