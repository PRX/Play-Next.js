@use '@styles/colors';
@use '@styles/theme';
@use '@components/Listen/Listen.use.scss' as Listen;

$caption-body-padding: 0.75em;
$feed-max-width: calc(65ch + #{$caption-body-padding} * 2);

:export {
  --cc-feed--max-width: #{$feed-max-width};
}

.root {
  --_cc-feed--gutter-start: var(
    --cc-feed--gutter-start,
    var(--cc-feed--gutter, 5rem)
  );
  --_cc-feed--gutter-end: var(
    --cc-feed--gutter-end,
    var(--cc-feed--gutter, 5rem)
  );
  --_cc-feed--max-width: var(--cc-feed--max-width);
  --_cc-feed--justify-content: var(--cc-feed--justify-content, center);
  --_cc-feed--inset: var(--cc-feed--inset, 0);
  --_cc-feed--top: var(--cc-feed--top, var(--_cc-feed--inset));
  --_cc-feed--right: var(--cc-feed--right, var(--_cc-feed--inset));
  --_cc-feed--bottom: var(--cc-feed--bottom, var(--_cc-feed--inset));
  --_cc-feed--left: var(--cc-feed--left, var(--_cc-feed--inset));
  --_cc-feed--margin-inline: var(--cc-feed--margin-inline, auto);
  --_cc-feed--margin-inline-start: var(
    --cc-feed--margin-inline-start,
    var(--_cc-feed--margin-inline)
  );
  --_cc-feed--margin-inline-end: var(
    --cc-feed--margin-inline-end,
    var(--_cc-feed--margin-inline)
  );

  position: absolute;
  top: var(--_cc-feed--top);
  right: var(--_cc-feed--right);
  bottom: var(--_cc-feed--bottom);
  left: var(--_cc-feed--left);
  display: block;
  justify-content: var(--_cc-feed--justify-content);
  // align-content: end;
  z-index: 0;

  padding-block-start: 30cqb;
  padding-block-end: 2rem;
  padding-inline-start: var(--_cc-feed--gutter-start);
  padding-inline-end: var(--_cc-feed--gutter-end);

  overflow: hidden;
  overflow-y: auto;
}

.jumpButton {
  --_jump-button--color: var(
    --jump-button--color,
    var(--accent-color, #{colors.$secondary-500})
  );
  --iconButton-color--hover: var(--_jump-button--color);
  --iconButton-size: 1.75rem;

  position: fixed;
  right: 1rem;
  bottom: calc(var(--gutter-size-block-end) + 1rem);
  z-index: 9;

  background-color: var(--listen-background-color);

  border: 2px solid var(--_jump-button--color);
  border-radius: 100vw;

  color: var(--_jump-button--color);
}

.captions {
  display: grid;
  grid-template-columns: [full-width-start] 0px [left-column-start] 1fr [right-column-start] 3fr [left-column-end] 1fr [right-column-end] 0px [full-width-end];
  grid-template-rows: 1fr;
  grid-auto-rows: auto;
  align-content: end;
  row-gap: 0.75rem;
  min-height: 100%;
  width: 100%;
  max-width: var(--_cc-feed--max-width);

  margin-inline-start: var(--_cc-feed--margin-inline-start);
  margin-inline-end: var(--_cc-feed--margin-inline-end);
}

.caption {
  --_cc-speaker--color: var(
    --cc-speaker--color,
    var(--accent-color, #{colors.$secondary-500})
  );

  grid-column: full-width;
  display: grid;
  justify-items: start;
  scroll-snap-align: end;

  &[data-position='right'] {
    justify-items: end;
  }

  .noSpeakers & {
    grid-column: 1 / -1;
  }

  &[data-current] ~ &:not(:where(:hover, :focus-visible)) {
    opacity: 0.3;
  }

  @supports (animation-timeline: view()) {
    animation: fade-out linear forwards;
    animation-timeline: view();
    animation-range-start: 30cqb;
    transition: opacity linear 200ms;

    transform: translateZ(0);

    &:hover(:hover, :focus-visible) {
      animation: none;
      opacity: 1;
    }
  }

  @media (min-width: Listen.$breakpoint-full) {
    grid-column: left-column;
    justify-items: start;

    &[data-position='right'] {
      grid-column: right-column;
      justify-items: end;
    }
  }
}

.speaker {
  padding-block-start: 1rem;
  padding-block-end: 0.5rem;
  padding-inline: 0.5rem;

  color: var(--_cc-speaker--color);
  font-size: clamp(1rem, 3cqi, 1.3rem);
  font-weight: bold;

  @include theme.light-child {
    color: color-mix(in lab, var(--_cc-speaker--color), black 20%);
  }
}

.captionBody {
  --_cc-body--background-color: var(--cc-body--background-color);
  --_cc-body--background-blur: var(--cc-body--background-blur, 0);
  --_cc-body--border-width: 1px;
  position: relative;
  isolation: isolate;
  overflow: hidden;
  transform: translateZ(0);

  margin: 0;
  padding-block: 0.75em;
  padding-inline: 1em;

  background-color: var(--_cc-body--background-color);
  backdrop-filter: blur(var(--_cc-body--background-blur));

  border-radius: 4px;

  box-shadow: 0 0 0 var(--_cc-body--border-width) var(--_cc-speaker--color);

  font-size: clamp(1rem, 4.5cqi, 1.5rem);
  text-align: start;
  text-wrap: balance;

  &::before {
    content: '';
    position: absolute;
    inset: 0;
    z-index: -1;
    opacity: 0;
    transition: opacity linear 200ms;
    background-image: linear-gradient(
      to right,
      var(--_cc-speaker--color),
      transparent 50%
    );
  }

  &:where(:hover, :focus-visible) {
    &::before {
      opacity: 0.3;
    }
  }

  .noSpeakers :not([data-current]) > & {
    transition: none;
    box-shadow: none;
  }

  [data-current] & {
    --_cc-body--border-width: 3px;
    opacity: 1;
  }

  [data-current][data-ended] & {
    --_cc-body--border-width: 1px;
    transition: box-shadow linear 100ms 1s;
  }

  .noSpeakers [data-current][data-ended] > & {
    box-shadow: none;
  }
}

.segment {
  [data-current] & {
    @media (prefers-reduced-motion: no-preference) {
      opacity: 0.5;

      @include theme.light-child {
        opacity: 0.3;
      }

      &[data-spoken='true'] {
        opacity: 1;
      }
    }
  }
}

@keyframes fade-out {
  to {
    opacity: 0;
  }
}
