/**
 * @file e.tsx
 * Exports the Embed page component.
 */

import { useReducer, useState } from 'react';
import { GetServerSideProps } from 'next';
import Head from 'next/head';
import dynamic from 'next/dynamic';
import clsx from 'clsx';
import { IEmbedData } from '@interfaces/data';
import { IEmbedConfig } from '@interfaces/embed/IEmbedConfig';
import parseEmbedParams from '@lib/parse/config/parseEmbedParams';
import fetchRssFeed from '@lib/fetch/rss/fetchRssFeed';
import parseEmbedData from '@lib/parse/data/parseEmbedData';
import PlayButton from '@components/Player/PlayButton';
import ThemeVars from '@components/ThemeVars';
import Modal from '@components/Modal';
import styles from '@styles/Embed.module.scss';
import PrxLogo from '@svg/prx-logo.svg';
import MoreHorizIcon from '@svg/icons/MoreHoriz.svg';
import CloseIcon from '@svg/icons/Close.svg';
import AddIcon from '@svg/icons/Add.svg';
import ShareIcon from '@svg/icons/Share.svg';
import FavoriteIcon from '@svg/icons/Favorite.svg';
import {
  embedInitialState,
  embedStateReducer
} from '@states/embed/Embed.reducer';
import { EmbedActionTypes } from '@states/embed/Embed.actions';

// Define dynamic component imports.
const IconButton = dynamic(() => import('@components/IconButton'));
const PrxImage = dynamic(() => import('@components/PrxImage'));
const PlayerText = dynamic(() => import('@components/Player/PlayerText'));
const ReplayButton = dynamic(() => import('@components/Player/ReplayButton'));
const ForwardButton = dynamic(() => import('@components/Player/ForwardButton'));
const Player = dynamic(() => import('@components/Player'));
const CoverArt = dynamic(() => import('@components/Player/CoverArt'));
const PlayerThumbnail = dynamic(
  () => import('@components/Player/PlayerThumbnail')
);

export interface IEmbedPageProps {
  config: IEmbedConfig;
  data: IEmbedData;
}

const EmbedPage = ({ config, data }: IEmbedPageProps) => {
  const { showCoverArt, showPlaylist, accentColor } = config;
  const { audio, playlist, bgImageUrl } = data;
  const { guid, imageUrl } = audio || {};
  const [state, dispatch] = useReducer(embedStateReducer, embedInitialState);
  const { shareShown, followShown, supportShown } = state;
  const [showMenu, setShowMenu] = useState(false);
  const menuShownClass = clsx({ [styles.menuShown]: showMenu });
  const coverArtImage = imageUrl || bgImageUrl;
  const canShowCoverArt = showCoverArt && coverArtImage;
  const canShowPlaylist = !!(showPlaylist && playlist?.length);
  const currentTrackIndex = playlist?.findIndex(
    (track) => track.guid === audio.guid
  );
  const mainClasses = clsx(styles.main, {
    [styles.withCoverArt]: canShowCoverArt,
    [styles.withPlaylist]: canShowPlaylist
  });

  const handleMoreButtonClick = () => {
    setShowMenu(!showMenu);
  };

  const handleFollowButtonClick = () => {
    dispatch({ type: EmbedActionTypes.EMBED_SHOW_FOLLOW_DIALOG });
  };

  const handleFollowCloseClick = () => {
    dispatch({ type: EmbedActionTypes.EMBED_HIDE_FOLLOW_DIALOG });
  };

  const handleShareButtonClick = () => {
    dispatch({ type: EmbedActionTypes.EMBED_SHOW_SHARE_DIALOG });
  };

  const handleShareCloseClick = () => {
    dispatch({ type: EmbedActionTypes.EMBED_HIDE_SHARE_DIALOG });
  };

  const handleSupportButtonClick = () => {
    dispatch({ type: EmbedActionTypes.EMBED_SHOW_SUPPORT_DIALOG });
  };

  const handleSupportCloseClick = () => {
    dispatch({ type: EmbedActionTypes.EMBED_HIDE_SUPPORT_DIALOG });
  };

  return (
    <>
      <ThemeVars theme="EmbedTheme" cssProps={styles} />

      <Head>
        <title>PRX Play - Embeddable Player</title>
        {/* <meta name="description" content="Generated by create next app" /> */}
        <style>{`
          :root {
            ${accentColor && `--accent-color: #${accentColor};`}
          }
        `}</style>
      </Head>

      <div className={styles.container}>
        <div className={mainClasses}>
          {audio && (
            <Player
              audio={playlist || audio}
              startIndex={currentTrackIndex}
              imageUrl={bgImageUrl}
            >
              {showCoverArt && (
                <div className={styles.coverArt}>
                  <CoverArt />
                </div>
              )}

              <div className={styles.playerContainer}>
                <div className={styles.background}>
                  <PrxImage
                    src={bgImageUrl}
                    layout="fill"
                    objectFit="cover"
                    aria-hidden
                  />
                </div>

                <div className={styles.playerMain}>
                  {!showCoverArt && (
                    <div className={styles.thumbnail}>
                      <PlayerThumbnail
                        sizes={`(min-width: 500px) ${styles['--playerThumbnail-size']}, ${styles['--playerThumbnail-size--mobile']}`}
                      />
                    </div>
                  )}

                  <div className={styles.text}>
                    <PlayerText />
                  </div>

                  <div className={styles.logo}>
                    {/* TODO: Get PRX text to line up with title baseline. */}
                    <PrxLogo className={styles.logoPrx} />
                  </div>

                  <div className={styles.panel}>
                    <div className={clsx(styles.controls, menuShownClass)}>
                      {/* TODO: Move play button into a PlayerControls component. */}

                      <ReplayButton
                        className={clsx(styles.button, styles.replayButton)}
                      />

                      <PlayButton
                        className={clsx(styles.button, styles.playButton)}
                      />

                      <ForwardButton
                        className={clsx(styles.button, styles.replayButton)}
                      />
                    </div>

                    <div className={clsx(styles.menu, menuShownClass)}>
                      {/* TODO: Replace content with dialog menu buttons. */}
                      <IconButton
                        type="button"
                        className={clsx(styles.menuButton, styles.followButton)}
                        onClick={handleFollowButtonClick}
                      >
                        <AddIcon />
                      </IconButton>

                      <IconButton
                        type="button"
                        className={clsx(styles.menuButton, styles.shareButton)}
                        onClick={handleShareButtonClick}
                      >
                        <ShareIcon />
                      </IconButton>

                      <IconButton
                        type="button"
                        className={clsx(
                          styles.menuButton,
                          styles.supportButton
                        )}
                        onClick={handleSupportButtonClick}
                      >
                        <FavoriteIcon />
                      </IconButton>
                    </div>

                    <div className={styles.menuToggle}>
                      <IconButton
                        type="button"
                        className={clsx(styles.iconButton, styles.moreButton)}
                        onClick={handleMoreButtonClick}
                      >
                        {showMenu ? <CloseIcon /> : <MoreHorizIcon />}
                      </IconButton>
                    </div>
                  </div>

                  <div className={styles.progressBar} />
                </div>
              </div>

              {canShowPlaylist && (
                <div className={styles.playlist}>
                  {/* TODO: Replace with Playlist component. */}
                  {playlist.map((track) => {
                    const {
                      title: trackTitle,
                      guid: trackGuid,
                      imageUrl: trackThumbUrl
                    } = track;
                    return (
                      <button
                        type="button"
                        className={clsx(styles.track, {
                          [styles.isCurrentTrack]: trackGuid === guid
                        })}
                        key={trackGuid}
                      >
                        {trackThumbUrl || imageUrl ? (
                          <div className={styles.trackThumbnail}>
                            <PrxImage
                              src={trackThumbUrl || imageUrl}
                              alt={`Thumbnail for "${trackTitle}".`}
                              layout="intrinsic"
                              width={styles['--playlist-thumbnail-size']}
                              height={styles['--playlist-thumbnail-size']}
                            />
                          </div>
                        ) : (
                          <span />
                        )}
                        <span className={styles.trackTitle}>{trackTitle}</span>
                      </button>
                    );
                  })}
                </div>
              )}
            </Player>
          )}
        </div>
      </div>

      {/* TODO: Add Modals here. */}

      {followShown && (
        <Modal onClose={handleFollowCloseClick}>Follow Menu</Modal>
      )}

      {shareShown && <Modal onClose={handleShareCloseClick}>Share Menu</Modal>}

      {supportShown && (
        <Modal onClose={handleSupportCloseClick}>Support Menu</Modal>
      )}
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  // 1. Convert query params into embed config.
  const config = parseEmbedParams(query);
  // 2. If RSS feed URL is provided.
  const rssData = config.feedUrl && (await fetchRssFeed(config.feedUrl));
  // 3. Parse config and RSS data into embed data.
  const data = parseEmbedData(config, rssData);

  return {
    props: { config, data }
  };
};

export default EmbedPage;
